<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" data-theme="dark">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>{{ config('app.name', 'Laravel') }} - AI-Powered 3D Model Generation</title>
    <meta name="description" content="BananaForge is a playful yet powerful pipeline that transforms text prompts into consistent, 3D-printable models using Gemini Flash.">

    <!-- Styles / Scripts -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="antialiased">

<header class="hero min-h-screen" style="background-image: url({{ asset('img/BananaForge.jpg') }});">
    <div class="hero-overlay bg-opacity-60"></div>
    <div class="hero-content text-center text-neutral-content">
        <div class="max-w-2xl">
            <div class="badge badge-accent badge-lg mb-4">Kaggle Competition Demo</div>
            <h1 class="mb-5 text-5xl font-bold">Banana Forge</h1>
            <p class="mb-5 text-xl">
                A tech demo for the <a href="https://www.kaggle.com/competitions/banana" class="link link-accent">"Nana Banana" Kaggle Competition</a>.
                <br/>
                This project demonstrates a pipeline for generating consistent front-and-back image pairs ("Nana Banana") from a single text prompt, which is the first critical step for 2D-to-3D model conversion.
            </p>
            <a href="#demo" class="btn btn-primary">Try the Demo</a>
        </div>
    </div>
</header>

<main>
    <section id="why-consistency" class="py-20 bg-base-200" aria-labelledby="why-consistency-heading">
        <div class="container mx-auto px-4">
            <div class="text-center mb-12">
                <h2 id="why-consistency-heading" class="text-4xl font-bold">The Power of Consistency</h2>
                <p class="mt-4 max-w-3xl mx-auto text-lg">
                    This technology doesn't replace human creativity; it amplifies it. By ensuring model consistency, we eliminate the tedious task of fixing errors. This frees you to focus on what truly matters: choosing the best designs and bringing your vision to life. It’s about making creative work more fun and achieving better results, faster.
                </p>
            </div>

            <article aria-labelledby="comparison-heading">
                <div class="text-center mb-10">
                    <h3 id="comparison-heading" class="text-3xl font-bold">Model Comparison</h3>
                    <p class="mt-2 max-w-3xl mx-auto">All models received the exact same prompt, which included instructions like 'left: front view, right: back view, the entire subject must be visible on both sides, consistency is crucial'. While other models struggle with these constraints, Gemini excels at generating perfectly consistent front and back views.</p>
                </div>

                <div class="flex justify-center items-center flex-wrap gap-4">
                    <figure class="flex flex-col items-center p-4">
                        <img src="{{ asset('img/comparison-openai.jpeg') }}" alt="A 3D model generation by OpenAI, showing some inconsistencies." class="rounded-lg shadow-2xl mb-2 w-64">
                        <figcaption class="font-semibold">OpenAI</figcaption>
                    </figure>
                    <figure class="flex flex-col items-center p-4">
                        <img src="{{ asset('img/comparison-firefly.jpg') }}" alt="A 3D model generation by Firefly, showing some inconsistencies." class="rounded-lg shadow-2xl mb-2 w-64">
                        <figcaption class="font-semibold">Firefly</figcaption>
                    </figure>
                    <figure class="flex flex-col items-center p-4 border-4 border-primary rounded-lg shadow-xl">
                        <img src="{{ asset('img/comparison-gemini.jpeg') }}" alt="A perfectly consistent 3D model of a ghost generated by Gemini." class="rounded-lg shadow-2xl mb-2 w-80">
                        <figcaption class="font-bold text-primary text-xl">Gemini (Winner)</figcaption>
                    </figure>
                    <figure class="flex flex-col items-center p-4">
                        <img src="{{ asset('img/comparison-flux.jpg') }}" alt="A 3D model generation by Flux, showing some inconsistencies." class="rounded-lg shadow-2xl mb-2 w-64">
                        <figcaption class="font-semibold">Flux</figcaption>
                    </figure>
                    <figure class="flex flex-col items-center p-4">
                        <img src="{{ asset('img/comparison-grok.jpeg') }}" alt="A 3D model generation by Grok, showing some inconsistencies." class="rounded-lg shadow-2xl mb-2 w-64">
                        <figcaption class="font-semibold">Grok</figcaption>
                    </figure>
                </div>
            </article>
        </div>
    </section>

    <section id="demo" class="py-20" aria-labelledby="demo-heading">
        <div class="container mx-auto px-4 text-center">
            <h2 id="demo-heading" class="text-4xl font-bold mb-4">Live Demo</h2>
            <p class="mb-8 max-w-2xl mx-auto">
                Use the options below to design your own unique figure. Click the button to start the generation process.
            </p>

            <form id="generation-form" class="max-w-2xl mx-auto">
                @csrf
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
                    <div class="form-control">
                        <label class="label" for="creature">
                            <span class="label-text">Creature</span>
                        </label>
                        <select id="creature" name="creature" class="select select-bordered w-full">
                            <option>friendly ghost</option>
                            <option selected>cute pumpkin monster</option>
                            <option>grumpy gnome</option>
                            <option>wise old owl</option>
                        </select>
                    </div>
                    <div class="form-control">
                        <label class="label" for="accessory">
                            <span class="label-text">Accessory</span>
                        </label>
                        <select id="accessory" name="accessory" class="select select-bordered w-full">
                            <option>wearing a witch hat</option>
                            <option selected>standing on a solid haunted book base</option>
                            <option>holding a glowing lantern</option>
                            <option>sitting on a mushroom</option>
                        </select>
                    </div>
                    <div class="form-control">
                        <label class="label" for="mood">
                            <span class="label-text">Mood</span>
                        </label>
                        <select id="mood" name="mood" class="select select-bordered w-full">
                            <option>cheerful spooky</option>
                            <option>dark and mysterious</option>
                            <option>playful and mischievous</option>
                            <option selected>serene and magical</option>
                        </select>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary btn-lg">Generate Figure</button>
            </form>

            <div id="loading" class="mt-8" style="display: none;">
                <p class="text-lg">Generating images, please wait...</p>
                <span class="loading loading-lg loading-spinner text-primary"></span>
            </div>

            <div id="results" class="mt-12 flex justify-center"></div>
        </div>
    </section>

    <section id="next-steps" class="py-20 bg-base-200" aria-labelledby="next-steps-heading">
        <div class="container mx-auto px-4 text-center">
            <h2 id="next-steps-heading" class="text-4xl font-bold mb-4">What's Next?</h2>
            <p class="mb-4 max-w-3xl mx-auto">
                This demo showcases the first step: generating consistent 2D views. The crucial next stage in the pipeline is converting these images into a 3D model (STL file) suitable for 3D printing.
            </p>
            <p class="max-w-3xl mx-auto">
                This functionality is not yet connected in the demo, but services like <a href="https://3d.hunyuan.tencent.com/" target="_blank" rel="noopener noreferrer" class="link link-primary">Tencent's Hunyuan 3D</a> or open-source models on <a href="https://huggingface.co/models?pipeline_tag=image-to-3d" target="_blank" rel="noopener noreferrer" class="link link-primary">Hugging Face</a> can be integrated to complete the process.
            </p>
        </div>
    </section>
</main>

<footer class="footer p-10 bg-base-300 text-base-content">
    <div>
        <span class="footer-title">BananaForge</span>
        <p>A personal project by a 3D printing enthusiast.<br>Work in progress, updated as time permits.</p>
    </div>
    <div>
        <span class="footer-title">Kaggle Competition</span>
        <a href="https://www.kaggle.com/competitions/banana" class="link link-hover">Nano Banana Hackathon
        </a>
    </div>
    <div>
        <span class="footer-title">Legal</span>
        <p>Copyright © {{ date('Y') }} - All right reserved</p>
    </div>
</footer>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('generation-form');
        const loading = document.getElementById('loading');
        const results = document.getElementById('results');

        form.addEventListener('submit', async function (e) {
            e.preventDefault();
            loading.style.display = 'block';
            results.innerHTML = '';

            const creature = document.getElementById('creature').value;
            const accessory = document.getElementById('accessory').value;
            const mood = document.getElementById('mood').value;

            try {
                // 1. Create the generation task
                const generationResponse = await fetch('{{ route("generations.store") }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="_token"]').value,
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ creature, accessory, mood })
                });

                if (!generationResponse.ok) {
                    const errorData = await generationResponse.json();
                    if (errorData.errors) {
                        const errorMessages = Object.values(errorData.errors).flat().join('<br>');
                        throw new Error(errorMessages);
                    }
                    throw new Error('Failed to start generation. Please check the console.');
                }

                const generation = await generationResponse.json();
                const generationId = generation.id;

                // 2. Poll for the images
                let images = [];
                let attempts = 0;
                const maxAttempts = 30; // Poll for 30 seconds max

                while (attempts < maxAttempts) {
                    const imagesResponse = await fetch(`/generations/${generationId}/images`);
                    if (imagesResponse.ok) {
                        const imageData = await imagesResponse.json();
                        // Only look for the 'full' image
                        const fullImage = imageData.find(img => img.role === 'full');
                        if (fullImage) {
                            images = [fullImage];
                            break; // Image is ready
                        }
                    }
                    await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second
                    attempts++;
                }

                if (images.length === 0) {
                    throw new Error('Image generation timed out or the \'full\' image was not found.');
                }

                // 3. Display the single 'full' image
                loading.style.display = 'none';
                const image = images[0];

                results.innerHTML = `
                    <div class="card bg-base-100 shadow-xl max-w-md mx-auto">
                        <figure>
                            <img src="/storage/${image.path}" alt="Generated full image of ${creature}">
                        </figure>
                        <div class="card-body">
                            <h3 class="card-title">Generation Complete!</h3>
                            <p>Your \"${creature}\" with the mood \"${mood}\" is ready.</p>
                        </div>
                    </div>
                `;


            } catch (error) {
                loading.style.display = 'none';
                results.innerHTML = `<div class="alert alert-error"><div><span>Error: ${error.message}</span></div></div>`;
                console.error(error);
            }
        });
    });
</script>

</body>
</html>
